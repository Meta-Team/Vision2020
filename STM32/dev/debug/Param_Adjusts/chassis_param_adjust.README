
文本说明：
        由于matlab调参工具可发出的指令格式固定，想用matlab调参必须将调参对象的控制指令塞入matlab调参工具的指令格式；
        此文本总结了所有matlab调参工具 底盘调参 的指令以及使用规范，以便套用
        不同测试对象的内部结构不尽相同，编写调参文件时还需基于测试对象做修改

固定头文件：
    #include "ch.hpp"
    #include "hal.h"
    #include "led.h"
    #include "serial_shell.h"
    #include "can_interface.h"
    #include "common_macro.h"
    #include "buzzer.h"

测试对象头文件以及其他所需的头文件：
    #include "xxx.h"

使用 chibios_rt 命名空间：
    using namespace chibios_rt;

CAN交互界面申明：
    CANInterface can1(&CAND1);
    // 注意：如果只用了一个CAN2，要把CAN1和CAN2两个都开起来！

测试所需的全局变量（内容自定）：
    float target_vx = 0.0f; // [mm/s]
    float target_vy = 0.0f; // [mm/s]
    float target_w = 0.0f;  // [degree/s], negative value for clockwise)
    time_msecs_t test_end_time = 0; // [ms]

调参数据反馈线程时间间隔：
    unsigned const CHASSIS_FEEDBACK_INTERVAL = 25; // [ms]

调参对象运行线程时间间隔（若调试SKD以及更高层的架构则不需要，因为其本身自带线程）：
    unsigned const CHASSIS_THREAD_INTERVAL = 2;    // [ms]

调参指令：

    1. 设置目标速度
    static void cmd_chassis_set_target(BaseSequentialStream *chp, int argc, char *argv[]) {
        (void) argv;
        if (argc != 4) {
            shellUsage(chp, "c_set_target vx(mm/s) vy(mm/s) w(deg/s, + for ccw) test_time(ms)");
            return;
        }

        target_vx = Shell::atof(argv[0]);
        target_vy = Shell::atof(argv[1]);
        target_w = Shell::atof(argv[2]);
        test_end_time = TIME_I2MS(chVTGetSystemTime()) + (time_msecs_t) Shell::atoi(argv[3]);

    }

    2. 设置PID参数
    static void cmd_chassis_set_parameters(BaseSequentialStream *chp, int argc, char *argv[]) {
        (void) argv;
        if (argc != 5) {
            shellUsage(chp, "c_set_params ki kp kd i_limit out_limit");
            chprintf(chp, "!cpe" SHELL_NEWLINE_STR);  // echo chassis parameters error
            return;
        }


        Chassis::change_pid_params({Shell::atof(argv[0]),
                                    Shell::atof(argv[1]),
                                    Shell::atof(argv[2]),
                                    Shell::atof(argv[3]),
                                    Shell::atof(argv[4])});
        // i_out is already clear when setting pid params
        chprintf(chp, "!cps" SHELL_NEWLINE_STR); // echo chassis parameters set
    }

    3. 查看PID参数
    static void cmd_chassis_echo_parameters(BaseSequentialStream *chp, int argc, char *argv[]) {
        (void) argv;
        if (argc != 0) {
            shellUsage(chp, "c_echo_params");
            return;
        }
        chprintf(chp, "engineer chassis V to I:    ");
        EngineerChassisSKD::print_pid();
        }

Shell指令集（所有通过窗口发送的指令名和相对应的函数名都要在此登记）：
    ShellCommand chassisCommands[] = {
            {"c_set_params",  cmd_chassis_set_parameters},
            {"c_set_target",  cmd_chassis_set_target},
            {"c_echo_params", cmd_chassis_echo_parameters},
            {nullptr,         nullptr}
    };

调参数据反馈线程：
    class ChassisFeedbackThread : public BaseStaticThread<1024> {
    private:
        void main() final {
            setName("chassis");
            while (!shouldTerminate()) {
                Shell::printf("!cv,%u,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f" SHELL_NEWLINE_STR,
                              TIME_I2MS(chibios_rt::System::getTime()),
                              Chassis::feedback[0].actual_velocity,
                              Chassis::target_velocity[0],
                              Chassis::feedback[1].actual_velocity,
                              Chassis::target_velocity[1],
                              Chassis::feedback[2].actual_velocity,
                              Chassis::target_velocity[2],
                              Chassis::feedback[3].actual_velocity,
                              Chassis::target_velocity[3]);
                sleep(TIME_MS2I(CHASSIS_FEEDBACK_INTERVAL));
            }
        }
    } chassisFeedbackThread;

调参对象运行线程（若调试SKD以及更高层的架构则不需要，因为其本身自带线程）：
    class ChassisThread : public BaseStaticThread<1024> {
    protected:
        void main() final {
            setName("chassis");
            while (!shouldTerminate()) {

                if (target_vx != 0.0f || target_vy != 0.0f || target_w != 0.0f) {

                    if (SYSTIME >= test_end_time) {

                        target_vx = target_vy = target_w = 0.0f;

                        for (int i = 0; i < Chassis::MOTOR_COUNT; i++) {
                            Chassis::target_current[i] = 0;
                        }

                        Shell::printf("!ce" SHELL_NEWLINE_STR);

                    } else {

                        // Perform calculation
                        Chassis::calc(target_vx, target_vy, target_w);

                    }
                }

                Chassis::enable_chassis_current_clip();

                sleep(TIME_MS2I(CHASSIS_THREAD_INTERVAL));
            }
        }
    } chassisThread;

调参 main 函数：
    int main(void) {

        halInit();
        System::init();

        // Start ChibiOS shell at high priority, so even if a thread stucks, we still have access to shell.
        Shell::start(HIGHPRIO);
        Shell::addCommands(chassisCommands);

        can1.start(HIGHPRIO - 1);
        Chassis::init(&can1, CHASSIS_WHEEL_BASE, CHASSIS_WHEEL_TREAD, CHASSIS_WHEEL_CIRCUMFERENCE);

        chassisFeedbackThread.start(NORMALPRIO - 1);
        chassisThread.start(NORMALPRIO);

        BuzzerSKD::play_sound(BuzzerSKD::sound_startup_intel, LOWPRIO);

        // See chconf.h for what this #define means.
    #if CH_CFG_NO_IDLE_THREAD
        // ChibiOS idle thread has been disabled,
        // main() should implement infinite loop
        while (true) {}
    #else
        // When main() quits, the main thread will somehow
        // enter an infinite loop, so we set the priority to lowest
        // before quitting, to let other threads run normally
        BaseThread::setPriority(1);
    #endif
        return 0;
    }

    main函数结构说明：

    1. 底层+系统+Shell+CAN总线初始化
        halInit();
        System::init();
        Shell::start(HIGHPRIO);
        Shell::addCommands(chassisCommands);
        can1.start(HIGHPRIO - 1);

    2. 测试对象初始化（具体传入参数参考具体函数）
        Chassis::init(&can1, CHASSIS_WHEEL_BASE, CHASSIS_WHEEL_TREAD, CHASSIS_WHEEL_CIRCUMFERENCE);

    3. 反馈线程+测试运行线程（或对象自带线程）启动
        chassisFeedbackThread.start(NORMALPRIO - 1);
        chassisThread.start(NORMALPRIO);

    4. 蜂鸣器示意初始化完成
        BuzzerSKD::play_sound(BuzzerSKD::sound_startup_intel, LOWPRIO);

    5.
        #if CH_CFG_NO_IDLE_THREAD
            // ChibiOS idle thread has been disabled,
            // main() should implement infinite loop
            while (true) {}
        #else
            // When main() quits, the main thread will somehow
            // enter an infinite loop, so we set the priority to lowest
            // before quitting, to let other threads run normally
            BaseThread::setPriority(1);
        #endif